#!wing
#!version=4.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': '6xo15gHDpFcZWNm956J1JGmwdf'\
        '3S6fbJ',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   2],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.24784313725490192,
                 'override_title': None,
                 'pagelist': [('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'column-widths': [1.0],
                                 'expanded-nodes': [(0,)],
                                 'selected-nodes': [(4,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('refactoring',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': False,
                                'wrap-lines': True}),
                              ('browser',
                               'tall',
                               0,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [2,
                          1],
        'notebook_display': 'normal',
        'notebook_percent': 0.18890554722638686,
        'override_title': None,
        'pagelist': [('bookmarks',
                      'wide',
                      1,
                      {'tree-state': []}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('debug-io',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 0,
                       'selection_start': 0}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 1249,
                       'folded-linenos': [],
                       'history': {None: ['a = 2\n',
        'a = [[1,2,3],[4,5,6]]\n'],
                                   u'file:C:/Documents and Settings/kaminscx/My Documents/Source/pschwartz-hpcc-awstools-24ed29b/APITest.py': [''\
        'a\n',
        'a.text\n',
        'a.getchildren\n',
        'params\n',
        'self.connect.im_class\n',
        'self.connection\n',
        'c = b[0]\n',
        'c\n',
        'c.get\n',
        'c.get()\n',
        'c.items\n',
        'c.items()\n',
        'c.text\n',
        'c.attrib\n',
        'c._children\n',
        'c._children[1].text\n',
        'c._children[1].findall\n',
        'c._children[1].findall()\n',
        'c._children[1]\n',
        'c._children[1].\n',
        'c._children[1].attrib\n',
        'd = c._children[1]\n',
        'd.tag\n',
        'd\n',
        'd.__repr__\n',
        'd.__repr__()\n',
        'response.object\n',
        'a = response.object\n',
        'b = super.(a,Response)\n',
        'b = super(a,Response)\n',
        'b = super(Response,a)\n',
        'driver.list_nodes()\n',
        'a = driver.list_nodes()\n',
        'len(a)\n',
        'a[0].__dict__\n',
        'a[0].id\n',
        'a[0].private_ip\n',
        'a[0].public_ip\n',
        'a[0].extra\n',
        'a[0].state\n',
        'a[1].state\n',
        'a[1].extra\n',
        'a[2].extra\n',
        'a[0]\n',
        'a[0].name\n',
        'response.body\n',
        'print response.body\n',
        'b[0].extra\n',
        'for node in b[0]: print node.public_ip\n',
        'for node in b: print node.public_ip\n',
        'for node in b: print node.public_ip[0]\n',
        'for node in b: print node.private_ip[0]\n',
        'driver.list_locations()\n',
        'b\n',
        "print b['keyMaterial']\n",
        'SSH_KEY\n',
        "client.connect('50.19.103.180', username='ubuntu', pkey=SSH_KEY)\n",
        'key.get_base64()\n',
        'key.get_name()\n',
        'key.write_private_key()\n',
        'key.get_bits()\n',
        'stdin.read()\n',
        'a = stdout.readlines()\n',
        'type(stdin)\n',
        'stdout.readline()\n',
        "ssh_stdin, ssh_stdout, ssh_stderr = client.exec_command('uptime')\n",
        "a = client.exec_command('uptime')\n",
        "ssh_stdin, ssh_stdout, ssh_stderr = client.exec_command(r'cd /home'"\
        ")\n",
        'ssh_stdout.readline()\n'],
                                   u'file:C:/Documents and Settings/kaminscx/My Documents/Source/pschwartz-hpcc-awstools-24ed29b/create.py': [''\
        'key\n',
        'opt.ops.amazon_key\n',
        'id\n',
        'opt.options.ami\n',
        'opt.options\n',
        'opt.options.amazon_id\n',
        'opt.options.amazon_key\n'],
                                   u'file:c:/Documents and Settings/kaminscx/My Documents/Source/aws/HPCC WebLauncher/prototype/Main.py': [''\
        'from xml.etree.cElementTree import ElementTree\n',
        'tree = ElementTree(a)\n',
        'a.text()\n',
        'a.tail()\n',
        'a.tag()\n',
        'a.tail\n',
        'a.text\n',
        'a.getchildren()\n',
        'b = a.getchildren[0]\n',
        'b = a.getchildren()[0]\n',
        'b.getchildren()\n',
        'a.getchildren()[0].getchildren()\n',
        'a.getchildren()[1].getchildren()\n',
        'b = a.getchildren()[1].getchildren()\n',
        'b = a.getchildren()[1].getchildren()[0]\n',
        'b.attrib\n',
        'b.tag\n',
        'b.text\n',
        'url\n',
        'print url\n',
        'print self.connection.getresponse()\n',
        'a  = print self.connection.getresponse()\n',
        'a = self.connection.getresponse()\n',
        'b = a.read()\n',
        'b.\n',
        'b\n',
        'print b\n',
        'results\n',
        'a = results[0]\n',
        "a.findall('groupName')\n",
        "a.findall('item')\n",
        'a.tag\n',
        "a.findall('{http://ec2.amazonaws.com/doc/2010-08-31/}groupName')\n",
        'a.findall(a.tag)\n',
        'type(a)\n',
        'a\n',
        'from xml.etree import ElementTree\n',
        'b = ElementTree(a)\n',
        'ElementTree.dump(a)\n',
        "a.findal('ns0:groupName')\n",
        "a.findall('ns0:groupName')\n",
        'for node in a: print node\n',
        "a.findall('requestId')\n",
        'a.keys()\n',
        'a.items()\n',
        "a.find('requestId')\n",
        'a._children\n'],
                                   u'file:c:/Documents and Settings/kaminscx/My Documents/Source/aws/HPCC WebLauncher/prototype/cleanaccount.py': [''\
        'instances[0]\n',
        'instances[0].instances\n',
        'instances[0].id\n',
        'instances[0].instances[0].group_name\n',
        'instances[0].instances[0].groups[0].name\n',
        'instances[0].instances[0].key_name\n'],
                                   u'file:c:/Documents and Settings/kaminscx/My Documents/Source/aws/HPCC WebLauncher/prototype/main.py': [''\
        'kps\n',
        'from pprint import pprint\n',
        'pp = pprint()\n',
        'pp(kps)\n',
        'pp = pprint(kps)\n'],
                                   u'file:c:/Documents and Settings/kaminscx/My Documents/Source/aws/HPCC WebLauncher/prototype/main2.py': [''\
        'busy_instances[0].update()\n',
        'first_instance.get_console_output()\n',
        'a = first_instance.update()\n',
        'a.GetConsoleOutputResponse()\n',
        'a = first_instance.get_console_output()\n',
        'a.GetConsoleOutputResponse\n',
        'a.output\n',
        'print a.output\n',
        'ssh_client\n',
        "ssh_client.connect(first_instance.ip_address, username='ubuntu', pk"\
        "ey=paramiko_key, timeout=300)\n",
        "ssh_client.connect(first_instance.ip_address, username='ubuntu', pk"\
        "ey=paramiko_key, timeout=10)\n",
        'instances\n',
        'instances[0].public_dns_name\n',
        'paramiko_key.generate\n',
        'paramiko_key.generate()\n',
        'f\n',
        'paramiko_key\n',
        'ssh_client = SSHClient()\n',
        'ssh_client.set_missing_host_key_policy(AutoAddPolicy())\n',
        "ssh_client.connect(first_instance.ip_address, username='ubuntu',pke"\
        "y=paramiko_key,timeout=10)\n",
        "output[0].strip().endswith('Done')\n",
        'output[0].strip()\n',
        'output[-1].strip()\n',
        "''.join([])\n",
        '[][-1]\n',
        "output.endswith('Done')\n",
        'print new_key_pair.material\n',
        'first_instance.ip_address\n',
        'a = ssh_stdout.readlines()\n',
        'RSAKey.from_private_key_file(key_string)\n',
        "f = StringIO.(key_string.encode('ascii')\n",
        ')\n',
        "f = StringIO.(key_string.encode('ascii'))\n",
        "key_string.encode('ascii')\n",
        'f = StringIO.(key_string)\n',
        "f = StringIO(key_string.encode('ascii'))\n",
        'RSAKey.from_private_key_file(f)\n',
        'filename\n',
        'super(Ext_SSHClient,self).invoke_shell()\n',
        'wait_time\n',
        'wait_time = 0\n',
        'super(Ext_SSHClient,self).close()\n',
        "super(Ext_SSHClient,self).connect(ip_address, username='ubuntu',pke"\
        "y=paramiko_key, timeout=1000)\n",
        'self.close()\n',
        'instances[0].ip_address\n',
        'instances[0].private_ip_address\n',
        'output.strip()\n',
        'print(output.strip())\n',
        'config.strip()\n',
        'new_config.strip()\n',
        'ssh_stdout.readlines()\n',
        'ssh_stdin.readlines()\n',
        'ssh_stdin, ssh_stdout, ssh_stderr = ssh_client.exec_command(cmd)\n',
        'f.flush()\n',
        'config\n',
        'new_config\n',
        'config.strip() == new_config.strip()\n',
        "print 'HPCC_CONFIG=$(cat<<UNIQUEEOF\\n%s\\nUNIQUEEOF\\n)' % config\n",
        "print('HPCC_CONFIG=$(cat<<UNIQUEEOF\\n%s\\nUNIQUEEOF\\n)' % config)"\
        "\n",
        "a = 'test%s%s' %\n",
        '(a) = (1)\n',
        'a\n',
        "cmd = 'sudo tee %s << UNIQUE_EOF\\n%s\\nUNIQUE_EOF\\n'\n",
        'cmd = cmd % (ENVIRON_FILE, config)\n',
        'print new_config\n',
        'ENVIRON_FILE\n',
        'repr(output)\n',
        "output = output.replace('\\xlb','')\n",
        "output = output.replace('\\\\xlb','')\n",
        'output\n',
        "'\\xlb'\n",
        "print('xlb')\n",
        "print(u'\\xlb')\n",
        "print(u'\\\\xlb')\n",
        'print(output)\n',
        'output(-3)\n',
        'output[-3:0]\n',
        'output[-3:]\n',
        'output[-4:]\n',
        'output[-2:]\n',
        'output[-1:]\n',
        'chr(output[-1:])\n',
        'ord(output[-1:])\n',
        'chr(27)\n',
        "'\\x1b'\n",
        "print('\\x1b')\n",
        'print output\n',
        'for x in output: print x\n',
        'a = Instance()\n',
        'cmd\n',
        'print(first_instance.ip_address)\n',
        'print cmd\n',
        'print config\n',
        'line\n',
        "line = line and line[0].split(',') or []\n",
        'len(line)\n',
        "esp_private_ip = len(line)== 6 and line[2] or ''\n",
        'esp_private_ip\n',
        'esp_public_ip\n',
        "esp_public_ip  = esp_public_ip and esp_public_ip[0] or ''\n"],
                                   u'file:c:/Documents and Settings/kaminscx/My Documents/Source/aws/HPCC WebLauncher/prototype/test3.py': [''\
        'super(self).cmd()\n',
        'super(test1,self).cmd()\n',
        'super(type(self),self).cmd()\n',
        'b = super(type(self),self)\n',
        'b\n',
        'a.cmd\n',
        'a.cmd()\n',
        'super(type(a),a)\n',
        'super(type(a),a).cmd()\n',
        'b = super(type(a),a)\n',
        'c = super(type(self),self)\n',
        'super(test2,self).cmd()\n',
        'super(Test1,self).cmd()\n',
        'super(Test2,self)\n',
        'super(Test2,self).cmd3()\n',
        'super(Test2,self).cmd()\n',
        'self.cmd()\n',
        'self.cmd2()\n',
        'self.cmd3()\n'],
                                   u'file:c:/Documents and Settings/kaminscx/My Documents/Source/aws/HPCC WebLauncher/prototype/xml-json.py': [''\
        'import pprint\n',
        'pp = pprint.PrettyPrinter(indent=3)\n',
        'pp.pprint(a)\n'],
                                   u'file:c:/Documents and Settings/kaminscx/My Documents/Source/aws/HPCC WebLauncher/prototype/xmltojson.py': [''\
        'a = []\n',
        'type(a)\n',
        'isinstance(a, list)\n',
        'isinstance(a, str)\n',
        'pp.pprint(groupNames)\n']},
                       'sel-line': 1264,
                       'sel-line-start': 51988,
                       'selection_end': 51992,
                       'selection_start': 51992}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.80000000000000004,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': ''}),
                     ('python-shell',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 61,
                       'folded-linenos': [],
                       'history': {None: ["s.find('z')\n",
        's\n',
        "s.find('e')\n",
        's[1:]\n',
        's[10:]\n',
        "{'':'test'}\n",
        "{'':'test','':'test'}\n",
        "raise 'test'\n",
        "raise BaseException('test')\n",
        '[].pop()\n',
        "group = {'test':\n",
        'a = {}\n',
        'a.copy()\n',
        "groups = {'group':{'item':{'userId':'test','groupName':'test}}}\n",
        "groups = {'group':{'item':{'userId':'test','groupName':'test'}}}\n",
        "groups = {'group':[{'item':{'userId':'test','groupName':'test'}}]}\n",
        'groups\n',
        'import boto.ec2\n',
        'from boto.ec2.connection import EC2Connection\n',
        'conn = EC2Connection(AMAZON_ID,AMAZON_KEY)\n',
        'conn.region()\n',
        'conn.region\n',
        'regions = boto.ec2.regions(AMAZON_ID,AMAZON_KEY)\n',
        'regions = boto.ec2.regions()\n',
        'regions = boto.ec2.regions(aws_access_key_id=AMAZON_ID, aws_secret_'\
        'access_key=AMAZON_KEY)\n',
        'for region in regions: print region.name\n',
        'boto.ec2.regioninfo()\n',
        'boto.ec2.regioninfo\n',
        'regions\n',
        'name = lambda x: x.name\n',
        'name\n',
        'for a in name(region): print a\n',
        'for a in name(regions): print a\n',
        'regions[0].name\n',
        'range(5)\n',
        'a = range(10)\n',
        'for x in a\n',
        'for x in a:\n',
        '   print x\n',
        '   a.pop()\n',
        "a = ''\n",
        'type(a)\n',
        "isinstance('',str)\n",
        'a = r"sudo tail /var/log/user-data.log"\n',
        'print a\n',
        'print output\n',
        '= 2\n',
        'a = 2\n',
        'a = 3\n',
        'a - 2\n',
        '(a - 2)/2\n',
        '(3)/2\n',
        '(4)/2\n',
        '3/2\n',
        '(3\\2)*2\n',
        '(3/2)*2\n',
        'int(3/2)*2\n',
        'int(5/2)*2\n',
        'a = 1\n',
        '(6-1)/2*2\n',
        'bool(-1)\n',
        'bool(0)\n',
        "'bc' in 'abcd'\n",
        "'bd' in 'abcd'\n",
        "'cd' in 'abcd'\n",
        'a = []\n',
        "a = ['ba']\n",
        "a and a[0] or ''\n",
        '3/2*2\n',
        'b = [4,5,6]\n',
        'zip(a,b)\n',
        'dict(zip(a,b))\n',
        'a = [[1,2,3],[4,5,6]]\n',
        '[x for x in a]\n',
        '[b for b in [x for x in a]]\n',
        '[b for b in a for x in b]\n',
        '[b for b in for x in b]\n',
        '[b for b in [for x in a]]\n',
        '[b for b in [ x for x in a]]\n',
        '[b for b in  x for x in a]\n',
        '[[b for b in  x] for x in a]\n',
        '[b for b in x for x in a]\n',
        '[for x in a for y in x]\n',
        '[x for x in a for y in x]\n',
        '[y for x in a for y in x]\n',
        'a = set([])\n',
        '[1,2,3] + [4,5,6]\n',
        'b\n',
        'c\n',
        'a = [123]\n',
        'a = [1,2,3]\n',
        'b=[1,2,3]\n',
        'a = set(a)\n',
        'b = set(b)\n',
        'set().intersection(a,b)\n',
        'b = set([1,5,6])\n',
        'a.intersection(b)\n',
        'a\n',
        'a =[1,2,3]\n',
        'len(a)\n']},
                       'sel-line': 69,
                       'sel-line-start': 1834,
                       'selection_end': 1838,
                       'selection_start': 1838}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'access_key_id',
                                       'fReverse': False,
                                       'fSearchText': u'path',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'Python Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': True,
                                       'fSearchText': u'get_console_output',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [('eval',
        'b'),
                                       ('eval',
        'c'),
                                       ('eval',
        'response')],
                       'tree-state': {'column-widths': [0.38338192419825073,
        0.61661807580174932],
                                      'expanded-nodes': [],
                                      'selected-nodes': [(0,)],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('settings.py'),
        {'attrib-starts': [],
         'first-line': 2,
         'folded-linenos': [],
         'sel-line': 19,
         'sel-line-start': 520,
         'selection_end': 520,
         'selection_start': 520},
        1322336546.0369999),
        (loc('settings.py'),
         {'attrib-starts': [],
          'first-line': 2,
          'folded-linenos': [],
          'sel-line': 23,
          'sel-line-start': 679,
          'selection_end': 740,
          'selection_start': 740},
         1322337032.24),
        (loc('settings.py'),
         {'attrib-starts': [],
          'first-line': 2,
          'folded-linenos': [],
          'sel-line': 23,
          'sel-line-start': 679,
          'selection_end': 753,
          'selection_start': 749},
         1322337122.3499999),
        (loc('settings.py'),
         {'attrib-starts': [],
          'first-line': 73,
          'folded-linenos': [],
          'sel-line': 94,
          'sel-line-start': 3660,
          'selection_end': 3694,
          'selection_start': 3694},
         1322337123.0680001),
        (loc('urls.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 306,
          'selection_start': 0},
         1322337934.881),
        (loc('aws/tests.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322337943.0840001),
        (loc('aws/models.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 5,
          'sel-line-start': 230,
          'selection_end': 306,
          'selection_start': 306},
         1322337944.881),
        (loc('aws/views.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 5,
          'sel-line-start': 230,
          'selection_end': 306,
          'selection_start': 306},
         1322337952.9119999),
        (loc('aws/tests.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322337957.8340001),
        (loc('aws/models.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 5,
          'sel-line-start': 230,
          'selection_end': 306,
          'selection_start': 306},
         1322337997.928),
        (loc('aws/tests.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322338000.4749999),
        (loc('aws/views.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 5,
          'sel-line-start': 230,
          'selection_end': 306,
          'selection_start': 306},
         1322338001.9749999),
        (loc('aws/models.py'),
         {'attrib-starts': [('ClusterKey',
                             20)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 22,
          'sel-line-start': 834,
          'selection_end': 834,
          'selection_start': 834},
         1322338006.3970001),
        (loc('settings.py'),
         {'attrib-starts': [],
          'first-line': 81,
          'folded-linenos': [],
          'sel-line': 106,
          'sel-line-start': 4021,
          'selection_end': 4025,
          'selection_start': 4025},
         1322343962.2869999),
        (loc('urls.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 10,
          'sel-line-start': 406,
          'selection_end': 406,
          'selection_start': 406},
         1322343999.0369999),
        (loc('aws/admin.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 3,
          'sel-line-start': 67,
          'selection_end': 92,
          'selection_start': 92},
         1322344123.9119999),
        (loc('aws/models.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 306,
          'selection_start': 0},
         1322344126.5369999),
        (loc('aws/admin.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 11,
          'sel-line-start': 463,
          'selection_end': 493,
          'selection_start': 493},
         1322344134.3180001),
        (loc('settings.py'),
         {'attrib-starts': [],
          'first-line': 82,
          'folded-linenos': [],
          'sel-line': 107,
          'sel-line-start': 4045,
          'selection_end': 4054,
          'selection_start': 4054},
         1322344214.881),
        [loc('urls.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 10,
          'sel-line-start': 406,
          'selection_end': 406,
          'selection_start': 406},
         1322344521.6470001]],
        19),
        'current-loc': loc('urls.py'),
        'editor-states': {loc('aws/admin.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 11,
        'sel-line-start': 463,
        'selection_end': 493,
        'selection_start': 493},
                          loc('aws/models.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 306,
        'selection_start': 0},
                          loc('aws/tests.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                          loc('aws/views.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 230,
        'selection_end': 306,
        'selection_start': 306},
                          loc('settings.py'): {'attrib-starts': [],
        'first-line': 82,
        'folded-linenos': [],
        'sel-line': 107,
        'sel-line-start': 4045,
        'selection_end': 4054,
        'selection_start': 4054},
                          loc('urls.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 406,
        'selection_end': 406,
        'selection_start': 406}},
        'has-focus': True},
                               'open_files': [u'aws/tests.py',
        u'aws/views.py',
        u'aws/models.py',
        u'aws/admin.py',
        u'settings.py',
        u'urls.py']},
        'split_percents': {0: 0.16858237547892721},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (310,
                         117,
                         962,
                         619)}]}
guimgr.recent-documents = [loc('urls.py'),
                           loc('settings.py'),
                           loc('aws/admin.py'),
                           loc('aws/models.py'),
                           loc('aws/views.py'),
                           loc('aws/tests.py')]
proj.env-vars = {loc('settings.py'): ('project',
                                      [''])}
search.search-history = [u'path',
                         u'cwd']
